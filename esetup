#!/bin/bash

grn="\e[32m"
cyn="\e[36m"
rst="\e[0m"    # reset
all=""

announce() {
  echo
  echo -e $grn"configuring $1"$rst
}

yna() {
  while true; do
    read -n1 -p "$1? (y/n/a) "
    echo
    case $REPLY in
      [aA] )
        echo -e $red'abort'$rst
        exit 1;;
      [yY] )
        return 0;;
      [nN] )
        return 1;;
      * )
        echo -e $red'please answer y/n/a'$rst;;
    esac
  done
}

dostep() {
  step=$1
  sdo=$2
  cmd=$3
  echo
  echo -e $grn"step $step: $cyn$cmd$rst"
  if [[ $all == "" ]] ; then
    if yna "run $cmd"; then
      echo -e $cyn"running $cmd$rst"
      echo
      if [[ $sdo == "y" ]] ; then
        sudo $cmd
      else
        $cmd
      fi
    fi
  else
    echo -e $cyn"running $cmd$rst"
    echo
    if [[ $sdo == "y" ]] ; then
      sudo $cmd
    else
      $cmd
    fi
  fi
}

prerequisites() {
  dostep 1 "y" "apt-get -y install --no-install-recommends make gcc automake autoconf"
  dostep 2 "y" "apt-get -y install --no-install-recommends g++ git curl"
  dostep 3 "y" "apt-get -y install --no-install-recommends gnupg autojump"
  dostep 4 "y" "apt-get -y install --no-install-recommends libxml2-utils"
}

git_flow_setup() {
  dostep 1 "n" "wget https://github.com/petervanderdoes/gitflow-avh/archive/master.zip"
  dostep 2 "n" "unzip master.zip"
  dostep 3 "n" "cd gitflow-avh-master"
  dostep 4 "y" "make install"
  dostep 5 "n" "cd .."
  dostep 6 "n" "rm -rf master.zip gitflow-avh-master"
}

tls_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends gnutls-bin"
  dostep 2 "y" "apt-get -y install --no-install-recommends ca-certificates"
}

keychain_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends keychain"
}

ag_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends silversearcher-ag"
}

scheme_curl() {
  curl http://3e8.org/pub/chicken-doc/chicken-doc-repo.tgz | sudo tar zx
}

scheme_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends guile-2.0"
  dostep 2 "y" "apt-get -y install --no-install-recommends chicken-bin libchicken7 libchicken-dev"
  dostep 3 "n" "chicken-install -s apropos chicken-doc input-parse numbers"
  dostep 4 "n" "chicken-install -s sxml-transforms matchable scss filepath spiffy uri-common"
  dostep 5 "n" "chicken-install -s doctype colorize multidoc defstruct atom svnwiki-sxml"
  dostep 6 "n" "chicken-install -s rfc3339 hyde webkit"
  dostep 7 "n" "cd $(csi -p '(chicken-home)')"
  dostep 8 "n" "scheme_curl"
  dostep 9 "n" "cd"
}

commonlisp_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends sbcl sbcl-doc"
  dostep 2 "y" "apt-get -y install --no-install-recommends cl-clx-sbcl cl-ppcre"
  dostep 3 "y" "apt-get -y install --no-install-recommends texinfo cl-swank"
}

clojure_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends openjdk-8-jdk openjdk-8-source"
  if [ ! -d "~/bin" ]; then
    dostep 2 "n" "mkdir -p ~/bin"
  fi
  dostep 3 "n" "wget https://raw.githubusercontent.com/technomancy/leiningen/stable/bin/lein -O ~/bin/lein"
  dostep 4 "n" "chmod 755 ~/bin/lein"
  dostep 5 "n" "lein"
}

idris_setup() {
  dostep 1 "y" apt-get update
  dostep 2 "y" apt-get install -y software-properties-common
  dostep 3 "y" add-apt-repository -y ppa:hvr/ghc
  dostep 4 "y" apt-get update
  dostep 5 "y" apt-get install -y cabal-install-1.22 ghc-7.10.3
  dostep 6 "n" cabal update
  dostep 7 "n" cabal install idris
}

haskell_setup() {
  dostep 1 "n" curl -sSL https://get.haskellstack.org/ | sh
  dostep 2 "n" cabal install happy
  dostep 3 "n" cabal install hlint
}

python_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends python2.7 ipython"
  dostep 2 "y" "apt-get -y install --no-install-recommends python-pip"
  dostep 3 "y" "pip install setuptools"
}

rust_curl() {
  curl https://sh.rustup.rs -sSf \| sh
}

rust_setup() {
  dostep 1 "n" "rust_curl"
  dostep 2 "n" "rustup component add rust-src"
  dostep 3 "n" "cargo install rustfmt"
  dostep 4 "n" "cargo install cargo-release"
  dostep 5 "n" "cargo install cargo-outdated"
  dostep 6 "n" "cargo install cargo-update"
  dostep 7 "n" "cargo install racer"
  dostep 8 "n" "cargo install tokei"
  dostep 9 "n" "cargo install ripgrep"
  dostep 10 "n" "cargo install --git https://github.com/sharkdp/fd"
  dostep 11 "n" "cargo install --git https://github.com/ogham/exa"
  dostep 12 "y" "ln -s ~/.cargo/bin/rg /usr/local/bin/rg"
  dostep 13 "n" "git clone --depth 1 git@github.com:lotabout/skim.git ~/.skim"
  dostep 14 "n" "~/.skim/install"
  dostep 15 "y" "sudo cp ~/.skim/bin/sk /usr/local/bin"
}

javascript_setup() {
  dostep 1 "y" "apt-get install --no-install-recommends npm nodejs"
  dostep 2 "y" "npm -g install js-beautify"
  dostep 3 "y" "ln -s /usr/bin/nodejs /usr/local/bin/node"
}

latex_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends texlive-full"
}

pandoc_setup() {
  dostep 1 "n" "wget https://github.com/jgm/pandoc/releases/download/1.19.2.1/pandoc-1.19.2.1-1-amd64.deb"
  dostep 2 "y" "dpkg -i pandoc-1.19.2.1-1-amd64.deb"
  dostep 3 "n" "rm pandoc-1.19.2.1-1-amd64.deb"
}

pdftools_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends libpng-dev"
  dostep 2 "y" "apt-get -y install --no-install-recommends zlib1g-dev"
  dostep 3 "y" "apt-get -y install --no-install-recommends libpoppler-glib-dev"
  dostep 4 "y" "apt-get -y install --no-install-recommends libpoppler-private-dev"
  dostep 4 "y" "apt-get -y install --no-install-recommends imagemagick"
}

flyspell_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends hunspell"
}

wordnet_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends wordnet"
}

font_setup() {
  dostep 1 "y" "apt-get -y install --no-install-recommends fonts-dejavu fonts-dejavu-extra"
  dostep 2 "y" "apt-get -y install --no-install-recommends ttf-ancient-fonts"
}

cask_curl() {
  curl -fsSL https://raw.githubusercontent.com/cask/cask/master/go | python
}

cask_setup() {
  dostep 1 "n" "cask_curl"
}

sudo -v # gets user password for next sudos

if [ "$1" == "-y" ]; then
  all="-y"
fi

cd
announce PREREQUISITES
prerequisites
announce GIT-FLOW
git_flow_setup
announce TLS
tls_setup
announce KEYCHAIN
keychain_setup
announce AG
ag_setup
announce CLOJURE
clojure_setup
announce SCHEME
scheme_setup
announce COMMONLISP
commonlisp_setup
announce IDRIS
idris_setup
announce HASKELL
haskell_setup
announce PYTHON
python_setup
announce RUST
rust_setup
announce JAVASCRIPT
javascript_setup
announce CASK
cask_setup
announce LaTeX
latex_setup
announce PANDOC
pandoc_setup
announce PDFTOOLS
pdftools_setup
announce FLYSPELL
flyspell_setup
announce WORDNET
wordnet_setup
announce FONT
font_setup

echo
echo "environment ready, now fire up Emacs!"
echo
